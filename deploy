#!/usr/bin/env bash

dotfiles_path=$(dirname "$0")

print_help() {
cat <<EOF
This script is basically just a wrapper for stow. Although for vim and xmonad it does
some additional work that is needed for them to function properly.
For vim it initializes the git submodules so that all vim plugins are properly installed.

Available arguments are:
    --deploy (Create symlinks for base dotfiles: git zsh vim antigen)
    --conclude (Delete symlinks for base dotfiles: git zsh vim antigen)

    --vim (For creating the necessary folders, installation of plugins, and symlinking)
    --antigen (For creating the necessary folders, installation of plugins, and symlinking)
EOF
}

#+++++++++#
#   VIM   #
#+++++++++#
vim_wrapper() {
    mkdir -p "$dotfiles_path"/vim/.vim/{autoload,bundle,backup,swap}
    echo "Cloning Vundle..."
    git clone https://github.com/gmarik/Vundle.vim.git vim/.vim/bundle/Vundle.vim
    stow -v vim
    echo "To install the plugins run, inside of vim, :VundleUpdate"
}

#+++++++++#
# ANTIGEN #
#+++++++++#
antigen_wrapper() {
    mkdir -p "$dotfiles_path"/antigen/.antigen
    echo "Cloning antigen..."
    git clone https://github.com/zsh-users/antigen.git antigen/.antigen
    stow -v antigen
}


#+++++++++#
#   MAIN  #
#+++++++++#
if [[ ! -x /usr/bin/stow ]] && [[ ! -x /bin/stow ]]; then
    echo "This script needs stow, please install it with your package manager of preference"
    exit

elif [[ $1 == "--deploy" ]]; then
    stow -v git zsh
    vim_wrapper
    antigen_wrapper

elif [[ $1 == "--conclude" ]]; then
    stow -v --delete git zsh vim antigen

# What to do for when we want to deploy vim
elif [[ $1 == "--vim" ]]; then
    vim_wrapper

# What to do for when we want to deploy antigen
elif [[ $1 == "--antigen" ]]; then
    antigen_wrapper

# Display the help
else
    print_help
fi
