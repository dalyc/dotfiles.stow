# http://jeroenjanssens.com/2013/08/16/quickly-navigate-your-filesystem-from-the-command-line.html
export MARKPATH="$HOME/.cache/marks"

function jj {
    cd -P "$MARKPATH/.lastjump" 2>/dev/null
}

function jump {
    cd -P "$MARKPATH/$1" 2>/dev/null || echo "No such mark: $1"
    if [[ -L "$MARKPATH/.lastjump" ]]; then
        rm "$MARKPATH/.lastjump" && ln --symbolic "$MARKPATH/$1" "$MARKPATH/.lastjump"
    else
        ln --symbolic "$MARKPATH/$1" "$MARKPATH/.lastjump"
    fi
}

function mark {
    # If the symlink exists
    if [[ -d $MARKPATH ]]; then
        # Let us run ln only when no arguments are given. Because
        # otherwise a symlink in our current $(pwd) will be created
        # and this is undesired behavior.
        if [[ -z $1 ]]; then
            ln -s "$(pwd)" "$MARKPATH/"
        else
            # TODO: Expand this section so that we are able to specify
            # the name for the symlink that we want.
            echo "This function only accepts one argument. Try again."
        fi
    # If the symlink does NOT exist
    else
        echo '$MARKPATH does not exist, creating the directory.'
        echo "Please try executing the command one more time."
        mkdir -p "$MARKPATH"
    fi
}

function unmark {
    if [[ -z $1 ]]; then
        echo "You have to give me an argument. Check output of marks"
    else
        rm -i "$MARKPATH/$1"
    fi
}

function marks {
    ls -l "$MARKPATH" | sed 's/  / /g' | cut -d' ' -f9- | sed 's/ -/\t-/g' && echo
}

# Autocompletition for marks
function _completemarks {
  reply=($(ls $MARKPATH))
}

compctl -K _completemarks jump
compctl -K _completemarks unmark
